:class CLI.Spec
  :is Spec
  :const describes: "CLI"

  :it "can define options and parse arguments against them"
    defs = CLI.Option.Defs.new

    defs.flag(False, "verbose", 'v')
    defs.i64(0, "min", 'm')
    defs.i64(100, "max", 'M')
    defs.f64(1.0, "red", 'r')
    defs.f64(1.0, "green", 'g')
    defs.f64(1.0, "blue", 'b')
    defs.string("Alice", "name", 'n')

    try (
      cli = CLI.Parser.parse!(defs, [])
      assert: cli.options.flag["verbose"]! == False
      assert: cli.options.i64["min"]! == 0
      assert: cli.options.i64["max"]! == 100
      assert: cli.options.f64["red"]! == 1.0
      assert: cli.options.f64["green"]! == 1.0
      assert: cli.options.f64["blue"]! == 1.0
      assert: cli.options.string["name"]! == "Alice"
      assert: cli.positional_args == []
      assert: cli.trailing_args == []
    | error |
      assert: error.message == "no error"
    )

    try (
      cli = CLI.Parser.parse!(defs, [
        "-vr", "0.5", "--green", "0.1", "--min=10", "-M", "200", "-n=Bob=Bibble"
      ])
      assert: cli.options.flag["verbose"]! == True
      assert: cli.options.i64["min"]! == 10
      assert: cli.options.i64["max"]! == 200
      assert: cli.options.f64["red"]! == 0.5
      assert: cli.options.f64["green"]! == 0.1
      assert: cli.options.f64["blue"]! == 1.0
      assert: cli.options.string["name"]! == "Bob=Bibble"
      assert: cli.positional_args == []
      assert: cli.trailing_args == []
    | error |
      assert: error.message == "no error"
    )

    try (
      cli = CLI.Parser.parse!(defs, [
        "foo", "-v", "bar", "baz", "--min=10", "blah", "--", "trail", "ing"
      ])
      assert: cli.options.flag["verbose"]! == True
      assert: cli.options.i64["min"]! == 10
      assert: cli.positional_args == ["foo", "bar", "baz", "blah"]
      assert: cli.trailing_args == ["trail", "ing"]
    )

    try (
      cli = CLI.Parser.parse!(defs, ["--bogus"])
      assert: "should have" == "errored"
    | error CLI.Error |
      assert: error.message == "unknown option: bogus"
    )

    try (
      cli = CLI.Parser.parse!(defs, ["--verbose", "--min"])
      assert: "should have" == "errored"
    | error CLI.Error |
      assert: error.message == "missing value for option: min"
    )

    try (
      cli = CLI.Parser.parse!(defs, ["--min", "--verbose"])
      assert: "should have" == "errored"
    | error CLI.Error |
      assert: error.message == "missing value for option: min"
    )

    try (
      cli = CLI.Parser.parse!(defs, ["-vm"])
      assert: "should have" == "errored"
    | error CLI.Error |
      assert: error.message == "missing value for option: min"
    )

    try (
      cli = CLI.Parser.parse!(defs, ["-mv"])
      assert: "should have" == "errored"
    | error CLI.Error |
      assert: error.message == "missing value for option: min"
    )

    try (
      cli = CLI.Parser.parse!(defs, ["-="])
      assert: "should have" == "errored"
    | error CLI.Error |
      assert: error.message == "invalid argument: -="
    )
